_Disclaimer:_
I have made this file public as a small experiment in sharing.
This does not mean that I expect this file to be useful to anyone in any way. I suspect the opposite. Here you will find a hodge-podge of not much.
Good day.
* Bagsend
** Advice from http://chromaticleaves.com/slides/smartstaticsites/#/13/4
*** Try pelican (python!)
*** use bootstrap or foundation
** AWS
grump about no $ cap
https://forums.aws.amazon.com/thread.jspa?start=50&threadID=58127&tstart=0

** Comment functionality
https://news.ycombinator.com/item?id=6818416
http://www.discourse.org/
https://github.com/mpalmer/jekyll-static-comments
https://staticman.net/
https://github.com/skx/e-comments

I think this is where I stop using a static site.
** default CSS
*** viewport shenanigans
want to make it Mobile friendly

  /*
  snippet from 
  https://developers.google.com/webmasters/mobile-sites/mobile-seo/responsive-design
  Lets the device set the width
  */

The meta viewport tag lets it scale, but is ugly on desktop -> want page to max out at 600 px or so.

changed width to max-width in body. Did nothing afaik

but if I put an empty div block before body, then it works...

I don't get it!
I think the names here are supposed to match with the names in the .html.
From that it looks like *body* is the important one - it is the post body.

In fact, nothing I change in body seems to have effect...
When I comment out meta viewport it works.

ohhhh is the meta supposed to be in the .html?
Yeah, I think so.
<meta name="viewport" content="width=device-width, initial-scale=1.0">
goes in .html. Changine width to max-width in body now does te trick. It seems to work without meta viewport in the html.

I will add it to the .html -> google mobile check doesn't like it.

Note that gwern has it in his .html
** foundation
having trouble putting it on.
need to copy folder to _site
but can't even get web based to work

some kind of autogenerate is at work.
get a different data-tabs generated each time I reload the working example.

If I copy the working one into the root of bg:

works if I have:

  <link rel="stylesheet" href="foundation/css/foundation.css">
   <script src="foundation/js/vendor/jquery.js"></script>
   <script src="foundation/js/vendor/foundation.min.js"></script>

doesn't work if I have:
  <link rel="stylesheet" href="foundation/css/foundation.css">
   <script src="/foundation/js/vendor/jquery.js"></script>
   <script src="/foundation/js/vendor/foundation.min.js"></script>

those forward slashes!
** Hakyll
https://jaspervdj.be/hakyll/reference/Hakyll-Web-Template-Context.html#v:defaultContext
https://jaspervdj.be/hakyll/tutorials/04-compilers.html
http://beerendlauwers.be/posts/2016-04-29-hakyll-adding-to-loadall.html
** Installation
1) Install Hakyll
2) hakyll-init bagsend.net
3) cd bagsend.net
4) git clone git@github.com:thegaps/bagsend.net.git
5) ?
6) build?
** Learning the lay of the land
*** Static site generators
Software that creates websites whose pages are static HTML; the HTML is not generated on the fly. These sites might still contain Javascript & the like.
*** Markup:
A language for writing documents that includes syntax for special representation, e.g. links, images, italics.
*** Pandoc
Converts between different markup formats
Can actually handle .org files, at least in a limited way!
https://zeitkraut.de/posts/2014-02-28-emacs-org-mode.html
Sweet!
*** Hakyll
A static site generator.
In Haskell
Uses pandoc
Not sure what it does
organises files, images etc?

Pretty much just feeds pandoc with various rules set in site.hs. Then adds extra html templates to the output. + some miscellaneous tags, metadata, niceties
*** Math
**** Image based
Using imagemajick
Old school, no JS.
**** MathJax
Modern, standard.
Uses javascript loaded from AMS to display math.
*** Org mode abilities
**** Math
Can handle math, using LaTex
e.g:

\begin{equation}
x=\sqrt{b}
\end{equation}

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

The above can be displayed in emacs using:

And reverted back to source using:

**** HTML export
Can export to HTML.
Includes math.
This is handy, but this is only per file. So, I would have to recompile every file that gets changed, or even just have a one page webpage (bad idea).
Need emacs to handle a /website/ not just a webpage.
**** Latex export
Can't handle URL's in section titles.
Nesting depth limit?
**** Tangling
Will have to try this out with a simple script
*** Emacs static site generators
**** using pandoc on org files.
Need separate file per post
Looks super legit though
** Mass adjusted life years.
Do fat people actually live for longer, if we count mass, or number of cells, not single beings?

Entered on [2016-08-13 Sat 11:42]
** Pandoc
*** Trying to customise pandoc options
**** tried to add extra module by _ in stack.yaml:

 # Packages to be pulled from upstream that are not in the resolver (e.g., acme-missiles-0.3)
 extra-deps:
 - text-1.2.2.


 OR could probably have gone =stack install text=

 maybe https://docs.haskellstack.org/en/stable/GUIDE/


*** What goes through Pandoc
 Anything in a post makes it to the output. Though Comment blocks do appear to be handled as expected.
 
 Commented out stuff in html templates makes it trough to the output.
** Publishing
 currently have a wobbly script. could look at just using git, and then having a hook on git push to also run a sync with the server
** Site generation
*** Hung process
find pid:
sudo netstat -nlp|grep 8000
kill:
kill -1 pid
** SSL
Does not seem important, as no personal info get's bandied around.
If carriers injecting random scripts etc into pages becomes super common, then this would be worthwhile.
resources:
- https://www.davidbaumgold.com/tutorials/host-static-site-aws-s3-cloudfront/
- https://olivermak.es/2016/01/aws-tls-certificate-with-jekyll/
- https://letsencrypt.org/
- https://osostudio.com/blog/how-to-encrypt-your-website-in-15-minutes/
- https://medium.com/@willmorgan/moving-a-static-website-to-aws-s3-cloudfront-with-https-1fdd95563106
- https://knightlab.northwestern.edu/2015/05/21/implementing-ssl-on-amazon-s3-static-websites/

** Standards
*** footnotes
[fn::actually, not actually]
"The quoted advice suggests that, if a footnote consists of a phrase or sentence fragment, you need not capitalize it or end it with a period (or any other end punctuation). Otherwise capitalise"
** Stats
wordcounts
Use final output - includes html
Use org input - includes comments

ideal - count in org
This is the sensible approach. Will try, if fail leave it for a better time

How to count in org?
can get counts in mode bar
But frequencies?
** Versioning and 'behind the scenes' would be so cool - different tabs at the top, built in evolution of the page. Git is definitely a gem here :)
** Webcam
*** Ended up on the subject of periodically capturing webcam and screen images.
 No idea how I ended up chasing this.
 Anyway, it's all set up now.
 And I can say that the most exciting way to hack is to set up a cron job running every minute, on a script you are trying to get to work. I displayed seconds in the notifications area so I could see when the minute was about to roll over & I would have to save and watch the new attempt fail/suceed.
** Website examples / style
http://idlewords.com/talks/website_obesity.htm
** Workflow
*** A typical software mini-project I do might follow the following timeline:
 1) Start a project .org file
    1) Could be in a project folder or in the bagsend drafts folder
 2) (in project file) write general descriptive ramble, describe project motivation 
 3) (in project file) collect links, random ideas. Maybe include some early code fragments
 4) start writing code
    1) source usually located where it will be used, or in a project folder (outside bags)
       1) use version control if it will be useful
    2) less often, source starts out as a code block
 5) Continue to develop code
    1) (in project file) ongoing results and references recorded in project file
 6) Collect neccessary data
    1) Usually located in project folder, or bagsend docs folder
 7) Create a bagsend post
    1) Either create a new document, or migrate existing project file to a post
 8) Publish bagsend post with script included in post body
 9) Continue to develop script in isolation, don't update anything else
*** This raises the following (potential) problems:
 1) Posts don't get updated
 2) The latest version of code might not be available
 3) The post is usually written in a style that introduces an idea. It would be weird to just update the code without updating the surrounding post. Updating the post could mean a complete re-write, and possibly require changing the post tense.
 4) If a project is migrated to a post, there is no longer a place for random free-form cruft.
*** These problems raise the following questions:
 1) What is the purpose of a post?
    1) capture a snapshot of a project in time
    2) be a complete reference for a project, as it develops over time
    => I value both of these
 2) What catagories of _things_ do I want?
    1) Posts and projects?
       - what's the difference?
    2) Structure reduced to 'primary' components? e.g Have the following objects (which are rehased as sensible):
       - Introduction / motivation blurb
       - code segment
       - results / comments
 3) If a post is the only project file, and I go all-out using code blocks (no separate code files), how would version control work?
    1) Would a bags post get an update every time a source code block changes?
       1) then version control is pretty messy - no repo for code for just that project.
	  1) Aha! but is there some git mechanism that would help?
	     1) tags
	     2) submodules
    2) Can I work efficiently with code-blocks? At the moment it adds an extra step to the coding process (more emacs-fu required)
    3) Should I make room somewhere for scripts I don't think are worth publishing at all?
    4) Do I want bags to be the process (slighlty polished) or one of many outputs of the process?
       1) If the former then it might be more worthwhile to look at the project process I follow and tie that together, then look a methods of publishing it from the native format
 4) Is this project at risk of being swallowed up by the drive towards a personal workbook? The success of this site (as a method to get /anything/ intelligible written down) might be dependant on it's current simplicity / loose format. The current way is not completely broken.
    - Do not introduce more steps to be taken
    - Keep changes small
*** Thoughts:
 I could use comment blocks to mitigate problem #4.
 _Every little script_ having it's own repo seems overkill.
The polar opposite is having many unrelated things in one repo. This causes problems: how do you go back to an earlier verion of project A (maybe to debug), without changing files in other projects. Can you do a checkout limited to certain files?
Middle grounds:
- everything in a shared repo 'pending'
  - until they become big enough to justify their own repo
- organise projects into catagories. Each catagory is a repo
*** Possible workflow #1
1) start a draft org post
2) write code / scratch around in draft post
3) publish post (no longer draft)
4) stop here if project is complete / abandoned, or continue if it warrants further development
5) create org project file + project repo, in bagsend/projects/
6) continue to develop code, use code blocks in project file
7) project files are displayed somewhere on bags
   1) probably don't want them put at the top of the landing page heap every time they are updated
8) add link from inital post to project file
9) continue to develop code, use code blocks in project file
10) Anything remarkable from further dev could go into orignal post. Or into a new post. Or stay in the project file. Hmmm[fn::I think this is where the crux of the problem Im trying to solve has moved too. It's like: "Here is a problem with the task you want to do" (tosses problem). You can either: Solve it, determine the problem is insolvable, and is completely coupled to the desired task, or decrease the scope of effect of the problem so it is smaller than the task you want to achieve. Weak example: Task:Mow the lawns this week. Problem1: My lawns are made of diamond. Outcome: Mow lawns with superhard cutting blades. Problem2: I don't have any lawns. Outcome2: Don't mow the lawns. Problem3: The lawns don't exist on Wednesdays. Outcome3: Don't attempt to mow the lawns on a Wednesday.].
*** Possible workflow #2
1) Start a project in a literate org file
2) Once viable:
   1) org file gets version controlled
   2) org file gets published on bags
   3) org file gets pushed to github
   4) tangled output automatically added to project folder, or maybe 'tangled' folder
3) Continue dev, working in the version controlled org files
   1) repeat push process - Bags gets update every git push, or maybe weekly

A possible structure:
- bagsend (bags repo root)
  - projects
    - project1.org
    - project2.org
    - code
      - project1.py
      - project2.py
      - +complete_project.py+
    - big_project (own repo, a submodule of bags)
      - big_project.org
      - code
	- big_project.py
      - data
	- big_project.csv
  - posts
    - story1.org
    - project2_introduction.org (links to ../projects/projec2.org)
    - +complete_project.org+

Where any code in a post does not get put anywhere else.
Or each project could get it's own folder, whether a submodule or not. Seems tidier, and easier to transition between submodule status.
Will sit on it [2017-10-11 Wed 22:25] ...
This decision is between: consistent (but often redundant) folder structures vs two different folder structures. Hmmm. A philosophical one. (psuedo) Flipped on it -  going with two different structures.

A re-read shows that this is pretty much the same as #1.
**** Refining the structure
- bagsend (bags repo root)
  - projects (projects repo root)
    - project1.org (script sized project)
    - project2.org
    - tangled (small project outputs)
      - project1.py
      - project2.py
      - project3.py (no .org needed)
    - bigger_project (own repo, a submodule of projects)
      - bigger_project.org
      - code
	- bigger_project.py
      - data (if lot's of it)
	- bigger_project.csv
  - posts
    - story1.org
    - project2_introduction.org (links to ../projects/projec2.org)
    - +complete_project.org+

Why do the bigger projects need to be submodules at all? Why not have the bigger brojects just be untracked folders?
What I do want is for the tidy, publishable version of projects to be elicted with a single command e.g. =~/projects $ git checkout master=. This will hide all junk files, temp files and WIP files, and let hakyll run over them all and make something useful of it.
=> Keep bigger projects as submodules

Extra introduction of hairiness:
The first post of a project is already pretty close to a literate file.
Do I then copy the first post to the project folder as project_name.org, then use the new file to generate future code? In the new file I would cut down on presentation as I develop the code.
=> that sounds workable, if a little ugly. I suppose coming up with two catagories for anything means some awkward decisions about where edge cases should live.

Ohhh this hits something, https://www.reddit.com/r/git/comments/3gt8ds/git_submodules_vs_symbolic_links/
In short; what I'm trying to do is madness. Don't try to solve the problem of how to have projects in a format to be used by Hakyll by making nested arrangements of submodules and symbolic links. This problem is probably best solved by some kind of glue script, going from a set-up or structure that suits projects, to one that suits bags.

Try this:
- bags (repo)
- projects
  - small projects (repo)
    - project1.org
    - project1.py
    - project2.org
    - project2.py
  - bigger_project3 (repo)
    - project3.org
    - project3.py
Then some method of getting files from all projects for bags. Maybe have a manually written list of projects and then just grab HEAD?
*** Actually different possible workflow #3
1) All projects start in their own project folder, outside of bags.
2) I might make a post on bags about a project, or something entirely different.
3) It doesn't really matter
*** What do other people do?
Everything on github + decent github readme.
If something fancier is required do a github-io (or is it pages?).
This is probably a good option. Is there any lock-in, or are we still using local text documents?
*** Conclusion
Do #1 and #2.
Seems a bit weird having /all/ projects in bags though... maybe put them in somewhere like ~/projects and symlink from bags?
How should I do readme's on github then? In some cases the project .org might be basically code + readme. Then I tangle the code. Then I c&p the rest to become the readme. Seems like a complete waste of time. Why not just a readme and the code? (as is typical on github)

A reason to use org files is to keep open an avenue for linking between projects, and organising projects more sensibly. I don't even think that follows though.

So ~/projects needs to be a repo. Should it be a repo in it's own right? which is then a submodule to the bags repo? That seems reasonable.
But, what if I want a project to be in the project repo, but not be on bags? Well, having multiple branches of the projects repo seems sensible - draft + published. Bags just checks out the published branch. tada!
*** Some days later
I have not worked on a project, but have worked on this re-shuffle. Time to get it out of the way.
Data:
- bags (repo)
- projects
  - littleProjects (repo)
    - project1.org
    - project2.org
    - code
      - project1.py
      - project2.py
  - bigger_project3 (repo)
    - project3.org
    - project3.py
View
- bags (site)
  - posts
    - post1, links to project1
    - post2
  - projects
    - project1, links to project1.py
**** projects in site.hs 
The following will add all .org files found in the projects folder to the Projects list.
#+BEGIN_SRC 

    match "projects/**.org" $ do
        route $ setExtension "html"
        compile $ pandocCompiler
            -- >>= loadAndApplyTemplate "templates/post.html"    postCtx
            >>= loadAndApplyTemplate "templates/default.html" defaultContext
            >>= loadAndApplyTemplate "templates/footer.html" defaultContext
            >>= relativizeUrls

    create ["projects.html"] $ do
        route idRoute
        compile $ do
            projects <- loadAll "projects/**.org"
            let projectsCtx =
                    listField "projects" defaultContext (return projects) `mappend`
                    constField "title" "Projects"            `mappend`
                    defaultContext
#+END_SRC
*** Planning the categories of org file to be made
There are three different types of org files to be made:
1) post (bags)
   - introduces an idea. Scrappy code
2) project page (bags)
   - page holding thoughts on an idea, various links etc
3) project readme (github)
   - semi-formal project overview. Not for discussion

I wanted 2) and 3) to be one thing. But the conventions surrounding 3) prevent me from doing so.

Decision:
1) create 2) and 3) separately
2) Track 3) in git
3) 2) follows usual github readme conventions

So the process is now:
1) Make post (presented on bags, stored in bags git)
---- many projects stop here ----
1b) Additional discussion in post (presented on bags, stored in bags git)
---- if code further developed ----
2) version control project files (project git started)
3a) make readme (presented on github, stored in project git)
---- if there's development discussion ----
3b) Make project page (presented on bags, stored in project git)
---- nothing new, only updates to any of above ----
* Tasks
** TODO Consider adding a post property that indicates it's time-sensitivity
   :PROPERTIES:
   :CREATED:  [2017-09-18 Mon 23:22:10]
   :END:
Could be used to make the 'importance' field decay in time (at different rates)
As long as it's exponential. Demonstratably exponential effects on processes at a high level of abstraction are like candy to this wannabe mathematician.

** TODO Automatic modified timestamps
   :PROPERTIES:
   :CREATED:  [2017-03-12 Sun 21:52:24]
   :END:
** TODO Can you sustain windows 10 on dailup?
   :PROPERTIES:
   :CREATED:  [2017-03-31 Fri 22:59:43]
   :END:
** TODO Category trees
** TODO Consider a 'now' page
   :PROPERTIES:
   :CREATED:  [2017-07-05 Wed 19:12:34]
   :END:
to replace the 'about' page
** TODO footpedal see http://xahlee.info/kbd/kinesis_foot_pedal.html
** DONE Get a favicon! I've done this before :) 
   :PROPERTIES:
   :CREATED:  [2016-12-13 Tue 07:02:53]
   :END:
   - State "DONE"       from "IN PROGRESS" [2017-09-30 Sat 13:38]
** TODO How did Ohm make his measurements?
   :PROPERTIES:
   :CREATED:  [2017-03-12 Sun 21:43:43]
   :END:
** TODO https://jaspervdj.be/hakyll/tutorials/using-teasers-in-hakyll.html
   :PROPERTIES:
   :CREATED:  [2017-08-19 Sat 11:59:49]
   :END:
** TODO indent body text a little compared to headings 
   :PROPERTIES:
   :CREATED:  [2016-12-17 Sat 00:15:58]
   :END:
** CANNED Kind of want justified text again. 
   :PROPERTIES:
   :CREATED:  [2016-11-27 Sun 10:18:48]
   :END:
It's weird though right?
** TODO Length of post in home view
** CANNED Look at moving a post to an org file which exports an org file which is the post
   :PROPERTIES:
   :CREATED:  [2016-11-27 Sun 09:18:06]
   :END:
That way I can have my own comments and background mish mash on a post
Canned: Comments are good enough. This is against the idea of openness, /and/ is more complex.
** TODO Noob post. What is this hakyll thing?
   :PROPERTIES:
   :CREATED:  [2017-02-03 Fri 07:21:15]
   :END:
** TODO show basic usage on github 
   :PROPERTIES:
   :CREATED:  [2016-12-17 Sat 00:52:41]
   :END:
I don't even know how I'd get this going again.
** TODO Tags
** TODO Top level design 
   :PROPERTIES:
   :CREATED:  [2016-12-17 Sat 10:48:38]
   :END:
Maybe I could move to a single org file that captures the relations between posts.
Then that gets exported to individual org files which get pandoctored...
** DONE update webcam, look at showing version history. Scripts in git? fancy js overlay? Something that combines both? 
   - State "DONE"       from "IN PROGRESS" [2017-11-04 Sat 16:12]
 Entered on [2016-09-24 Sat 01:22]
In git. That's plenty.
** TODO Where's all my math? can't frac{}{} :(
   :PROPERTIES:
   :CREATED:  [2017-02-19 Sun 09:20:27]
   :END:
** IN PROGRESS Post on open self, start discussing it 
 Entered on [2016-09-13 Tue 06:18]
** IN PROGRESS Want to share this _entire_ project
   :PROPERTIES:
   :CREATED:  [2017-09-16 Sat 07:48:05]
   :END:
Could be a 'meta' section of the site. Or maybe 'dev'.
Would share my workings, and my todos.

Do I really need a private place for bagsend notes?
- server set up

So maybe it is best that I keep some things private. Though it could be an early test-bed of radical openness.

** OPT post blurbs?
** OPT Move to new drafts system
what is the new drafts system?

I think http://www.limansky.me/posts/2015-10-31-Draft-posts-with-Hakyll.html
might be the way to go.

BUT.
This is work and effort so in future I can put off *completing* things. Seems bad. If anything I want pressure to complete things. I suppose there is a balance to not making it easy to start. I think that is less of a problem. Also C-c c n capture template exists and is pretty legit.
*** also see:
**** https://www.jdreaver.com/posts/2014-06-22-math-programming-blog-hakyll.html
**** http://geekplace.eu/flow/posts/2014-09-24-draft-posts-with-hakyll.html
** DONE Ask jasper to be on the cool peoples blog list 
   :PROPERTIES:
   :CREATED:  [2016-12-23 Fri 16:53:22]
   :END:
   - State "DONE"       from "IN PROGRESS" [2017-03-18 Sat 15:39]

** DONE Footpedal update 
   - State "DONE"       from "TODO"       [2016-09-21 Wed 21:48]
there's a bunch of comments there ready to be expanded & included

 Entered on [2016-09-15 Thu 06:12]
** DONE Github [9/9]
    - State "DONE"       from "TODO"       [2016-10-01 Sat 11:27]
 Do I still want my own repo surrounding the github main site repo?
 I think the only thing in it at this stage would be =

 How do I check everything, all files all history?
 Check branch history. -> master is pretty much the same

 Aha!
 Drafts!
 Where do they go?
 => In my own repo surrounding it.

*** DONE Check content [2/2]
    - State "DONE"       from "TODO"       [2016-10-01 Sat 11:10]
**** DONE As is
     - State "DONE"       from "TODO"       [2016-10-01 Sat 10:41]
**** DONE All versions
      - State "DONE"       from "TODO"       [2016-10-01 Sat 09:08]
 Too hard. Will just have to start day 0 from now.
*** DONE Check git
     - State "DONE"       from "TODO"       [2016-10-01 Sat 09:10]
 Not doing history
*** DONE Move leak
    - State "DONE"       from "TODO"       [2016-10-01 Sat 10:29]
*** DONE Archive current git.
     - State "DONE"       from "TODO"       [2016-10-01 Sat 09:14]
 Have local_host.git
*** DONE Check .folders
    - State "DONE"       from "TODO"       [2016-10-01 Sat 10:41]
*** DONE user set
    - State "DONE"       from "TODO"       [2016-10-01 Sat 11:10]
*** DONE Publish
    - State "DONE"       from "TODO"       [2016-10-01 Sat 11:17]
*** DONE Recheck online in github
    - State "DONE"       from "TODO"       [2016-10-01 Sat 11:27]

** DONE Have links to source on each page 
   :PROPERTIES:
   :CREATED:  [2016-12-14 Wed 22:41:57]
   :END:
   - State "DONE"       from "IN PROGRESS" [2016-12-17 Sat 09:53]
** DONE Hitchiking comic
   :PROPERTIES:
   :CREATED:  [2017-02-19 Sun 10:00:43]
   :END:
   - State "DONE"       from "IN PROGRESS" [2017-09-16 Sat 19:01]
Added to 'calibrate'
** TODO Collect some more website examples
   :PROPERTIES:
   :CREATED:  [2017-11-04 Sat 16:13:32]
   :END:
** TODO Tree sitemap
   :PROPERTIES:
   :CREATED:  [2017-12-24 Sun 22:51:25]
   :END:
